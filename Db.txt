USER
id int PK AI,
name varchar(255) NOT NULL,
email varchar(255) NOT NULL,
password varchar(255),
isStudent boolean DEFAULT TRUE,

COURSE
id int PK AI,
courseName varchar (100) not null unique,
description text,
startDate date,
endDate date,
duration integer , -- in months
price decimal(6, 2),
teacherId int FK references USERS userId,






Teachers:

TeacherID (Primary Key)
Username
Email
Phone
Address
=========================================
Students:

StudentID (Primary Key)
Username
Email
Phone
Address
ProgramId
SemesterId
======================================================
Programs:

ProgramID (Primary Key)
ProgramName
Description

==============================================

ProgramSemester:

SemesterID (Primary Key)
SemesterName
Description
ProgramID(Foreign Key referencing Program)

===============================================
Courses:

CourseID (Primary Key)
CourseName
SemesterID (Foreign Key referencing Semesters)
ProgramID (Foreign Key referencing Programs)
Description
FacultyID
================================================
Assignments:

AssignmentID (Primary Key)
CourseID (Foreign Key referencing Courses)
AssignmentName
DueDate
Description
MaxPoints
===========================================
AssignmentSubmissions:

SubmissionID (Primary Key)
AssignmentID (Foreign Key referencing Assignments)
StudentID (Foreign Key referencing Students)
SubmissionDate
FileURL (for uploaded assignments)
Comments
==========================================
Grades:

GradeID (Primary Key)
AssignmentID (Foreign Key referencing Assignments)
StudentID (Foreign Key referencing Students)
TeacherID (Foreign Key referencing Teachers)
Grade
GradingDate

Relationships:

Each Teacher can be associated with multiple Courses.
Each Course is part of a Program.
Each Course can have multiple Assignments.
Each Assignment can have multiple AssignmentSubmissions (one submission per student).
Each Assignment can have multiple Grades (one grade per student).
This more detailed schema includes additional fields like phone numbers, addresses, and descriptions for teachers, students, programs, courses, and assignments. It also includes the MaxPoints field in the Assignments table to specify the maximum points possible for an assignment, which can be useful for grading purposes. Feel free to adjust the schema further to match your specific requirements.















const { table } = require("../db");

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.up = function(knex) {
  return knex.schema
  .createTable('faculty',table=>{
    table.increments('id');
    table.string('email').notNullable().unique();
    table.string('username').notNullable();
    table.string('password').notNullable();
  })
  .createTable('semester',table=>{
    table.increments('id');
    table.integer('semester').notNullable();
  })
  .createTable('program',table=>{
    table.increments('id');
    table.string('name').notNullable();
    table.string('description').notNullable();
    table.integer('semester_id');
    table.foreign('semester_id').references('id').inTable('semester');    
})
.createTable('student',table=>{
    table.increments('id');
    table.string('email').notNullable().unique();
    table.string('username').notNullable();
    table.string('password').notNullable();
    table.integer('program_id');
    table.foreign('program_id').references('id').inTable('program');   
})
.createTable('course',table=>{
    table.increments('id');
    table.string('name').notNullable();
    table.string('description').notNullable();
    table.integer('program_id');
    table.integer('semester_id');
    table.integer('faculty_id');
    table.foreign('program_id').references('id').inTable('program');   
    table.foreign('semester_id').references('id').inTable('semester');   
    table.foreign('faculty_id').references('id').inTable('faculty');   
  })
.createTable('assignment',table=>{
        table.increments('id');
        table.string('name').notNullable();
        table.string('description').notNullable();
        table.dateTime('due_date').notNullable();
        table.integer('course_id');
        table.foreign('course_id').references('id').inTable('course');   
    })
.createTable('assignment_submission',table=>{
        table.increments('id');
        table.string('file_url').notNullable();
        table.dateTime('submission_date').notNullable();
        table.integer('assignment_id');
        table.integer('student_id');
        table.foreign('assignment_id').references('id').inTable('assignment');   
        table.foreign('student_id').references('id').inTable('student');   
    })
.createTable('grade',table=>{
        table.increments('id');
        table.dateTime('grading_date').notNullable();
        table.integer('grade').notNullable();
        table.integer('assignment_id');
        table.integer('student_id');
        table.integer('teacher_id');
        table.foreign('assignment_id').references('id').inTable('assignment');   
        table.foreign('student_id').references('id').inTable('student');   
        table.foreign('teacher_id').references('id').inTable('teacher');   
    })
};

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.down = function(knex) {
  return knex.schema
    .dropTable('grade')
    .dropTable('assignment_submission')
    .dropTable('assignment')
    .dropTable('course')
    .dropTable('student')
    .dropTable('program')
    .dropTable('faculty')
    .dropTable('semester');
  

};
